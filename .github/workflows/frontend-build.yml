name: Frontend Build

on:
  # PR이 생성되거나 업데이트될 때 실행
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  # 수동으로 워크플로우 실행 가능하도록 설정
  workflow_dispatch:

jobs:
  docker-build-test:
    name: Test Docker Build
    runs-on: ubuntu-latest
    concurrency: 
      group: build
      cancel-in-progress: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/dockerfile
          push: false
          tags: frontend-test:latest
          load: true  # 이미지를 로컬 Docker 데몬에 로드
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Docker container from built image
        run: |
          docker run -d --name frontend-test -p 3000:3000 frontend-test:latest
          # 컨테이너가 시작될 때까지 잠시 대기
          sleep 10
      
      - name: Check if container is running
        run: |
          if docker ps | grep frontend-test; then
            echo "✅ Container is running successfully"
          else
            echo "❌ Container failed to start"
            docker logs frontend-test
            exit 1
          fi
      
      - name: Send a test request to the container
        run: |
          # 간단한 HTTP 요청으로 서버가 응답하는지 확인
          response_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "failed")
          if [ "$response_code" = "200" ] || [ "$response_code" = "301" ] || [ "$response_code" = "302" ]; then
            echo "✅ Server responded with status code $response_code"
          else
            echo "❌ Server failed to respond properly, got status code: $response_code"
            docker logs frontend-test
            exit 1
          fi
      
      - name: Clean up container
        run: docker rm -f frontend-test || true
      
      - name: Print success message
        run: echo "✅ Docker image build and container test successful" 